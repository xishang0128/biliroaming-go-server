// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTHSeason2EpisodeCaches(t *testing.T) {
	t.Parallel()

	query := THSeason2EpisodeCaches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTHSeason2EpisodeCachesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHSeason2EpisodeCachesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := THSeason2EpisodeCaches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHSeason2EpisodeCachesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := THSeason2EpisodeCachSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHSeason2EpisodeCachesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := THSeason2EpisodeCachExists(ctx, tx, o.EpisodeID)
	if err != nil {
		t.Errorf("Unable to check if THSeason2EpisodeCach exists: %s", err)
	}
	if !e {
		t.Errorf("Expected THSeason2EpisodeCachExists to return true, but got false.")
	}
}

func testTHSeason2EpisodeCachesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	thSeason2EpisodeCachFound, err := FindTHSeason2EpisodeCach(ctx, tx, o.EpisodeID)
	if err != nil {
		t.Error(err)
	}

	if thSeason2EpisodeCachFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTHSeason2EpisodeCachesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = THSeason2EpisodeCaches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTHSeason2EpisodeCachesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := THSeason2EpisodeCaches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTHSeason2EpisodeCachesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	thSeason2EpisodeCachOne := &THSeason2EpisodeCach{}
	thSeason2EpisodeCachTwo := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, thSeason2EpisodeCachOne, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}
	if err = randomize.Struct(seed, thSeason2EpisodeCachTwo, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thSeason2EpisodeCachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thSeason2EpisodeCachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := THSeason2EpisodeCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTHSeason2EpisodeCachesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	thSeason2EpisodeCachOne := &THSeason2EpisodeCach{}
	thSeason2EpisodeCachTwo := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, thSeason2EpisodeCachOne, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}
	if err = randomize.Struct(seed, thSeason2EpisodeCachTwo, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thSeason2EpisodeCachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thSeason2EpisodeCachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func thSeason2EpisodeCachBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func thSeason2EpisodeCachAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *THSeason2EpisodeCach) error {
	*o = THSeason2EpisodeCach{}
	return nil
}

func testTHSeason2EpisodeCachesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &THSeason2EpisodeCach{}
	o := &THSeason2EpisodeCach{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, false); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach object: %s", err)
	}

	AddTHSeason2EpisodeCachHook(boil.BeforeInsertHook, thSeason2EpisodeCachBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachBeforeInsertHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.AfterInsertHook, thSeason2EpisodeCachAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachAfterInsertHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.AfterSelectHook, thSeason2EpisodeCachAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachAfterSelectHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.BeforeUpdateHook, thSeason2EpisodeCachBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachBeforeUpdateHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.AfterUpdateHook, thSeason2EpisodeCachAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachAfterUpdateHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.BeforeDeleteHook, thSeason2EpisodeCachBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachBeforeDeleteHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.AfterDeleteHook, thSeason2EpisodeCachAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachAfterDeleteHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.BeforeUpsertHook, thSeason2EpisodeCachBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachBeforeUpsertHooks = []THSeason2EpisodeCachHook{}

	AddTHSeason2EpisodeCachHook(boil.AfterUpsertHook, thSeason2EpisodeCachAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	thSeason2EpisodeCachAfterUpsertHooks = []THSeason2EpisodeCachHook{}
}

func testTHSeason2EpisodeCachesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTHSeason2EpisodeCachesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(thSeason2EpisodeCachColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTHSeason2EpisodeCachToOneTHSeason2CachUsingSeason(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local THSeason2EpisodeCach
	var foreign THSeason2Cach

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, thSeason2CachDBTypes, false, thSeason2CachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2Cach struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SeasonID = foreign.SeasonID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Season().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SeasonID != foreign.SeasonID {
		t.Errorf("want: %v, got %v", foreign.SeasonID, check.SeasonID)
	}

	slice := THSeason2EpisodeCachSlice{&local}
	if err = local.L.LoadSeason(ctx, tx, false, (*[]*THSeason2EpisodeCach)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Season = nil
	if err = local.L.LoadSeason(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTHSeason2EpisodeCachToOneSetOpTHSeason2CachUsingSeason(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a THSeason2EpisodeCach
	var b, c THSeason2Cach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, thSeason2EpisodeCachDBTypes, false, strmangle.SetComplement(thSeason2EpisodeCachPrimaryKeyColumns, thSeason2EpisodeCachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, thSeason2CachDBTypes, false, strmangle.SetComplement(thSeason2CachPrimaryKeyColumns, thSeason2CachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, thSeason2CachDBTypes, false, strmangle.SetComplement(thSeason2CachPrimaryKeyColumns, thSeason2CachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*THSeason2Cach{&b, &c} {
		err = a.SetSeason(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Season != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SeasonTHSeason2EpisodeCaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SeasonID != x.SeasonID {
			t.Error("foreign key was wrong value", a.SeasonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SeasonID))
		reflect.Indirect(reflect.ValueOf(&a.SeasonID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SeasonID != x.SeasonID {
			t.Error("foreign key was wrong value", a.SeasonID, x.SeasonID)
		}
	}
}

func testTHSeason2EpisodeCachesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTHSeason2EpisodeCachesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := THSeason2EpisodeCachSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTHSeason2EpisodeCachesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := THSeason2EpisodeCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	thSeason2EpisodeCachDBTypes = map[string]string{`EpisodeID`: `bigint`, `SeasonID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                           = bytes.MinRead
)

func testTHSeason2EpisodeCachesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(thSeason2EpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(thSeason2EpisodeCachAllColumns) == len(thSeason2EpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTHSeason2EpisodeCachesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(thSeason2EpisodeCachAllColumns) == len(thSeason2EpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thSeason2EpisodeCachDBTypes, true, thSeason2EpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(thSeason2EpisodeCachAllColumns, thSeason2EpisodeCachPrimaryKeyColumns) {
		fields = thSeason2EpisodeCachAllColumns
	} else {
		fields = strmangle.SetComplement(
			thSeason2EpisodeCachAllColumns,
			thSeason2EpisodeCachPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := THSeason2EpisodeCachSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTHSeason2EpisodeCachesUpsert(t *testing.T) {
	t.Parallel()

	if len(thSeason2EpisodeCachAllColumns) == len(thSeason2EpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := THSeason2EpisodeCach{}
	if err = randomize.Struct(seed, &o, thSeason2EpisodeCachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert THSeason2EpisodeCach: %s", err)
	}

	count, err := THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, thSeason2EpisodeCachDBTypes, false, thSeason2EpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THSeason2EpisodeCach struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert THSeason2EpisodeCach: %s", err)
	}

	count, err = THSeason2EpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
