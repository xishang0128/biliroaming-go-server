// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTHEpisodeCaches(t *testing.T) {
	t.Parallel()

	query := THEpisodeCaches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTHEpisodeCachesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHEpisodeCachesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := THEpisodeCaches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHEpisodeCachesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := THEpisodeCachSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTHEpisodeCachesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := THEpisodeCachExists(ctx, tx, o.EpisodeID)
	if err != nil {
		t.Errorf("Unable to check if THEpisodeCach exists: %s", err)
	}
	if !e {
		t.Errorf("Expected THEpisodeCachExists to return true, but got false.")
	}
}

func testTHEpisodeCachesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	thEpisodeCachFound, err := FindTHEpisodeCach(ctx, tx, o.EpisodeID)
	if err != nil {
		t.Error(err)
	}

	if thEpisodeCachFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTHEpisodeCachesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = THEpisodeCaches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTHEpisodeCachesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := THEpisodeCaches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTHEpisodeCachesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	thEpisodeCachOne := &THEpisodeCach{}
	thEpisodeCachTwo := &THEpisodeCach{}
	if err = randomize.Struct(seed, thEpisodeCachOne, thEpisodeCachDBTypes, false, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}
	if err = randomize.Struct(seed, thEpisodeCachTwo, thEpisodeCachDBTypes, false, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thEpisodeCachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thEpisodeCachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := THEpisodeCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTHEpisodeCachesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	thEpisodeCachOne := &THEpisodeCach{}
	thEpisodeCachTwo := &THEpisodeCach{}
	if err = randomize.Struct(seed, thEpisodeCachOne, thEpisodeCachDBTypes, false, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}
	if err = randomize.Struct(seed, thEpisodeCachTwo, thEpisodeCachDBTypes, false, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thEpisodeCachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thEpisodeCachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func thEpisodeCachBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func thEpisodeCachAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *THEpisodeCach) error {
	*o = THEpisodeCach{}
	return nil
}

func testTHEpisodeCachesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &THEpisodeCach{}
	o := &THEpisodeCach{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, false); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach object: %s", err)
	}

	AddTHEpisodeCachHook(boil.BeforeInsertHook, thEpisodeCachBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachBeforeInsertHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.AfterInsertHook, thEpisodeCachAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachAfterInsertHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.AfterSelectHook, thEpisodeCachAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachAfterSelectHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.BeforeUpdateHook, thEpisodeCachBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachBeforeUpdateHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.AfterUpdateHook, thEpisodeCachAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachAfterUpdateHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.BeforeDeleteHook, thEpisodeCachBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachBeforeDeleteHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.AfterDeleteHook, thEpisodeCachAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachAfterDeleteHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.BeforeUpsertHook, thEpisodeCachBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachBeforeUpsertHooks = []THEpisodeCachHook{}

	AddTHEpisodeCachHook(boil.AfterUpsertHook, thEpisodeCachAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	thEpisodeCachAfterUpsertHooks = []THEpisodeCachHook{}
}

func testTHEpisodeCachesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTHEpisodeCachesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(thEpisodeCachColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTHEpisodeCachesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTHEpisodeCachesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := THEpisodeCachSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTHEpisodeCachesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := THEpisodeCaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	thEpisodeCachDBTypes = map[string]string{`EpisodeID`: `bigint`, `Data`: `json`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                    = bytes.MinRead
)

func testTHEpisodeCachesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(thEpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(thEpisodeCachAllColumns) == len(thEpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTHEpisodeCachesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(thEpisodeCachAllColumns) == len(thEpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &THEpisodeCach{}
	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thEpisodeCachDBTypes, true, thEpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(thEpisodeCachAllColumns, thEpisodeCachPrimaryKeyColumns) {
		fields = thEpisodeCachAllColumns
	} else {
		fields = strmangle.SetComplement(
			thEpisodeCachAllColumns,
			thEpisodeCachPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := THEpisodeCachSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTHEpisodeCachesUpsert(t *testing.T) {
	t.Parallel()

	if len(thEpisodeCachAllColumns) == len(thEpisodeCachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := THEpisodeCach{}
	if err = randomize.Struct(seed, &o, thEpisodeCachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert THEpisodeCach: %s", err)
	}

	count, err := THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, thEpisodeCachDBTypes, false, thEpisodeCachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize THEpisodeCach struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert THEpisodeCach: %s", err)
	}

	count, err = THEpisodeCaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
